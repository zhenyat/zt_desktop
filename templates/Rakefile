# Rakefile to handle DB

require 'yaml'
require 'logger'
require 'active_record'
require './lib/db_handle.rb'

# Log file
$LOG = Logger.new(File.open('logs/db.log', 'w'))
# ActiveRecord::Base.logger = Logger.new(File.open('logs/db.log', 'w'))

namespace :db do

#  def create_db
#    begin
#      # Creates database in memory. So it is not permanent.
#      #db = SQLite3::Database.new ":memory:"
#
#      # creates a real database
#      db = SQLite3::Database.new @config['database']
#
#      $LOG.debug "SQLite version used: #{db.get_first_value 'SELECT SQLITE_VERSION()'}" if @config['logger']
#
#    rescue SQLite3::Exception => e
#      $LOG.logger.error("#{e}")
#      puts "Exception occurred:  #{e}"
#    ensure
#      db.close if db
#    end
#  end

  task :environment do
    DATABASE_ENV   = ENV['DATABASE_ENV']   || 'development'
    MIGRATIONS_DIR = ENV['MIGRATIONS_DIR'] || 'db/migrate'
  end

  task :configuration => :environment do
    @config = YAML.load_file('config/database.yml')[DATABASE_ENV]
    $LOG.debug "Config: #{@config}" if @config['logger']
  end

  task :configure_connection => :configuration do
    ActiveRecord::Base.establish_connection @config
    $LOG.debug("Connection done") if @config['logger']
  end

  desc 'Create the database from config/database.yml for the current DATABASE_ENV'
  task :create => :configure_connection do
    DbHandle::create
  end

  desc 'Drops the database for the current DATABASE_ENV'
  task :drop => :configure_connection do
    ActiveRecord::Base.connection.drop_database @config['database']
  end

  desc 'Migrate the database (options: VERSION=x, VERBOSE=false).'
  task :migrate => :configure_connection do
    ActiveRecord::Migration.verbose = true
    ActiveRecord::Migrator.migrate MIGRATIONS_DIR, ENV['VERSION'] ? ENV['VERSION'].to_i : nil
  end

  desc 'Rolls the schema back to the previous version (specify steps w/ STEP=n).'
  task :rollback => :configure_connection do
    step = ENV['STEP'] ? ENV['STEP'].to_i : 1
    ActiveRecord::Migrator.rollback MIGRATIONS_DIR, step
  end

  desc "Retrieves the current schema version number"
  task :version => :configure_connection do
    puts "Current version: #{ActiveRecord::Migrator.current_version}"
  end
end